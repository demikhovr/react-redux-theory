{"version":3,"sources":["redux/actions/actionTypes.js","redux/actions/actions.js","Counter.js","App.js","redux/reducers/counter1.js","redux/reducers/counter2.js","redux/rootReducer.js","serviceWorker.js","index.js"],"names":["ADD","SUB","ADD_NUMBER","INPUT","ADD2","addNumber","number","type","payload","connect","state","counter","counter2","dispatch","onChange","add2","_ref","react_default","a","createElement","style","padding","border","onClick","counter1","inputValue","onAdd","onSub","onAddNumber","onInput","_ref2","value","target","onAsyncAdd","setTimeout","asyncAdd","textAlign","bind","src_Counter","INITIAL_STATE","combineReducers","arguments","length","undefined","action","Object","objectSpread","Boolean","window","location","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","next","result","console","log","getState","reduxThunk","app","es","src_App_0","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7ab6dd1f.chunk.js","sourcesContent":["export const ADD = 'ADD';\nexport const SUB = 'SUB';\nexport const ADD_NUMBER = 'ADD_NUMBER';\nexport const INPUT = 'INPUT';\nexport const ADD2 = 'ADD2';\n","import {\n  ADD, ADD_NUMBER, SUB, INPUT, ADD2,\n} from './actionTypes';\n\nexport const add = () => ({\n  type: ADD,\n});\n\nexport const sub = () => ({\n  type: SUB,\n});\n\nexport const addNumber = number => ({\n  type: ADD_NUMBER,\n  payload: number,\n});\n\nexport const input = value => ({\n  type: INPUT,\n  payload: value,\n});\n\nexport const asyncAdd = number => dispatch => setTimeout(() => dispatch(addNumber(number)), 2000);\n\nexport const add2 = number => ({\n  type: ADD2,\n  payload: number,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { add2 } from './redux/actions/actions';\n\nconst Counter = ({ counter, onChange }) => (\n  <div style={{ padding: 20, border: '2px solid #cccccc' }}>\n    <h2>\n      Counter&nbsp;\n      {counter}\n    </h2>\n    <hr />\n    <div>\n      <button onClick={() => onChange(1)} type=\"button\">Add 1</button>\n      <button onClick={() => onChange(-1)} type=\"button\">Sub 1</button>\n    </div>\n  </div>\n);\n\nCounter.propTypes = {\n  counter: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  counter: state.counter2.counter2,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: number => dispatch(add2(number)),\n});\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport Counter from './Counter';\nimport {\n  add, sub, addNumber, input, asyncAdd,\n} from './redux/actions/actions';\n\nconst App = ({\n  counter, onAdd, onSub, onAddNumber, onInput, inputValue, onAsyncAdd,\n}) => (\n  <div\n    style={{\n      textAlign: 'center',\n    }}\n  >\n    <h2>\n      Счетчик&nbsp;\n      {counter}\n    </h2>\n    <hr />\n    <div>\n      <button onClick={onAdd} type=\"button\">Add 1</button>\n      <button onClick={onSub} type=\"button\">Sub 1</button>\n    </div>\n    <div>\n      <input type=\"number\" onChange={onInput} value={inputValue || ''} />\n      <button onClick={onAddNumber.bind(this, inputValue)} type=\"button\">\n        Add&nbsp;\n        {inputValue}\n      </button>\n      <button onClick={onAddNumber.bind(this, -inputValue)} type=\"button\">\n        Sub&nbsp;\n        {inputValue}\n      </button>\n    </div>\n    <div>\n      <button onClick={onAsyncAdd.bind(this, 100)} type=\"button\">\n        Async add 100\n      </button>\n    </div>\n    <Counter />\n  </div>\n);\n\nApp.propTypes = {\n  counter: PropTypes.number.isRequired,\n  onAdd: PropTypes.func.isRequired,\n  onSub: PropTypes.func.isRequired,\n  onAddNumber: PropTypes.func.isRequired,\n  onInput: PropTypes.func.isRequired,\n  inputValue: PropTypes.number.isRequired,\n  onAsyncAdd: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  counter: state.counter1.counter,\n  inputValue: state.counter1.inputValue,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onAdd: () => dispatch(add()),\n  onSub: () => dispatch(sub()),\n  onAddNumber: number => dispatch(addNumber(number)),\n  onInput: ({ target }) => dispatch(input(+target.value)),\n  onAsyncAdd: number => dispatch(asyncAdd(number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  ADD, ADD_NUMBER, INPUT, SUB,\n} from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n  counter: 0,\n  inputValue: 5,\n};\n\nexport default function counter1(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case ADD:\n      return {\n        ...state,\n        counter: state.counter + 1,\n      };\n    case SUB:\n      return {\n        ...state,\n        counter: state.counter - 1,\n      };\n    case ADD_NUMBER:\n      return {\n        ...state,\n        counter: state.counter + action.payload,\n      };\n    case INPUT:\n      return {\n        ...state,\n        inputValue: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n","import { ADD2 } from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n  counter2: 200,\n};\n\nexport default function counter2(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case ADD2:\n      return {\n        ...state,\n        counter2: state.counter2 + action.payload,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport counter1 from './reducers/counter1';\nimport counter2 from './reducers/counter2';\n\nexport default combineReducers({\n  counter1, counter2,\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport reduxThunk from 'redux-thunk';\nimport App from './App';\nimport rootReducer from './redux/rootReducer';\nimport * as serviceWorker from './serviceWorker';\n\nconst composeEnhancers = typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\n\nconst loggerMiddleware = store => next => (action) => {\n  const result = next(action);\n  console.log('Middleware', store.getState());\n  return result;\n};\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(\n  loggerMiddleware,\n  reduxThunk,\n)));\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}